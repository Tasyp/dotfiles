set shell=/bin/bash

" ALE LINTER

let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black', 'isort'],
\   'javascript': ['eslint']
\}
let g:ale_linters = {
\   'python': ['pylint'],
\   'javascript': ['eslint']
\}
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" PLUGIN MANAGEMENT

call plug#begin('~/.vim/plugged')

Plug 'thaerkh/vim-indentguides'
Plug 'vim-airline/vim-airline'
Plug 'mhartington/oceanic-next'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'dylanaraps/wal.vim'
Plug 'joshdick/onedark.vim'
Plug 'sheerun/vim-polyglot'
Plug 'iamcco/markdown-preview.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'mileszs/ack.vim'
Plug 'justinmk/vim-sneak'
Plug 'Quramy/vim-js-pretty-template'
Plug 'peitalin/vim-jsx-typescript'
Plug 'maralla/completor.vim'
Plug 'maralla/completor-typescript'

call plug#end()

" USER SETTINGS

set showcmd

inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
nmap <Space> <Leader>

syntax enable

set wildmode=full
set wildmenu

" set listchars=tab:>·,space:·
" set list

set laststatus=2
set noshowmode
set number
set termguicolors

colorscheme onedark
" hi Normal guibg=NONE ctermbg=NONE

" AUTOCOMPLETE

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()

" TEMPLATE LITERAL HIGHLIGHT

autocmd FileType javascript JsPreTmpl css
autocmd FileType typescript JsPreTmpl css
autocmd FileType typescript.tsx JsPreTmpl css

" SNEAK.VIM

let g:sneak#label = 1

" ACK.VIM

let g:ackprg = 'ag --vimgrep'

" INDENT GUIDES

let g:indentguides_firstlevel = 0

" MARKDOWN PREVIEW

let g:mkdp_path_to_chrome = "surf"

" NERD TREE
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "NEW",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "DEL",
    \ "Dirty"     : "MOD",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : 'x',
    \ "Unknown"   : "?"
    \ }

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden=1

let g:NERDTreeWinSize=24

let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '<'

no <C-j> <C-w>j
no <C-k> <C-w>k
no <C-l> <C-w>l
no <C-h> <C-w>h
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>n :NERDTreeToggle<Enter>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
