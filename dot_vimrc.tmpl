set nocompatible

" COC

{{ if eq .chezmoi.os "darwin" -}}
let g:coc_node_path = '/opt/homebrew/bin/node'
{{ end }}
let g:coc_global_extensions = [
      \'coc-json',
      \'coc-tsserver',
      \'coc-css',
      \'coc-html',
      \'coc-yaml',
      \'coc-svelte',
      \'coc-prettier',
      \'coc-elixir',
      \'coc-erlang_ls',
      \'coc-solargraph',
      \]

" QUICK-SCOPE

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" PLUGIN MANAGEMENT

" VIM-PLUG AUTOINSTALL
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'mhartington/oceanic-next'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'sheerun/vim-polyglot'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-hijack.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'justinmk/vim-sneak'
Plug 'unblevable/quick-scope'
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'

call plug#end()

nmap <Space> <Leader>

syntax enable
filetype plugin on

set splitbelow
set splitright
set showcmd
" set path=$PWD/**
" set wildignore+=*/node_modules/*
set wildmode=full
set wildmenu
set backspace=indent,eol,start
set laststatus=2
set noshowmode
set termguicolors
set number relativenumber
set ruler
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

" CoC

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif


" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Quick-scope

augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
  autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
augroup END

" Color scheme

colorscheme OceanicNext

" LIGHTLINE

let g:lightline = {
\   'colorscheme': 'one',
\}

" SNEAK.VIM

let g:sneak#label = 1

" Fern

hi FernBranchText guifg='#6699cc' ctermfg=68
nmap <Leader>- :Fern . -reveal=%<CR>

" Closetags

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.html.eex,*.html.heex'

" Autopairs

let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`", '<%=':'%>'}

no <C-j> <C-w>j
no <C-k> <C-w>k
no <C-l> <C-w>l
no <C-h> <C-w>h
no 0 ^
no ^ 0
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Ag<CR>
